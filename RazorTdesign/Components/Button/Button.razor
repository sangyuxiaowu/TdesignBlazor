@namespace RazorTdesign.Components

<button type="@ButtonType.ToDescriptionString()" id="@Id" class="@ClassName" disabled="@Disabled" @onclick="@OnClick">
    <CascadingValue Value="this" IsFixed="true">
        @ChildContent
    </CascadingValue>
</button>

@code {
    /// <summary>
    /// 获得 按钮样式集合
    /// </summary>
    /// <returns></returns>
    protected string? ClassName => CssBuilder.Default("t-button")
        .AddClass("t-size-full-width", IsBlock)
        .AddClass("t-is-disabled", IsDisabled)
        .AddClass($"t-size-{Size.ToDescriptionString()}", Size != Size.None)
        .AddClass($"t-button--shape-{ButtonShape.ToDescriptionString()}", ButtonShape != ButtonShape.Rectangle)
        .AddClass($"t-button--theme-{Color.ToDescriptionString()}")
        .AddClass($"t-button--variant-{ButtonVariant.ToDescriptionString()}")
        .Build();

    /// <summary>
    /// 获得/设置 组件 id 属性
    /// </summary>
    [Parameter]
    public virtual string? Id { get; set; }

    /// <summary>
    /// 获得/设置 按钮类型 Submit 为表单提交按钮 Reset 为表单重置按钮 默认为 Button
    /// </summary>
    [Parameter]
    public ButtonType ButtonType { get; set; } = ButtonType.Button;


    /// <summary>
    /// 获得/设置 是否禁用 默认为 false
    /// </summary>
    [Parameter]
    public bool IsDisabled { get; set; }

    /// <summary>
    /// 获得 按钮禁用状态属性
    /// </summary>
    protected string? Disabled => IsDisabled ? "disabled" : null;

    /// <summary>
    /// 获得/设置 是否为块级元素 默认为 false
    /// </summary>
    [Parameter]
    public bool IsBlock { get; set; }

    /// <summary>
    /// 获得/设置 是否为幽灵按钮（镂空按钮） 默认为 false
    /// </summary>
    [Parameter]
    public bool IsGhost { get; set; }


    /// <summary>
    /// 获得/设置 Size 大小
    /// </summary>
    [Parameter]
    public Size Size { get; set; } = Size.None;

    /// <summary>
    /// 获得/设置 按钮 Shape
    /// </summary>
    [Parameter]
    public ButtonShape ButtonShape { get; set; } = ButtonShape.Rectangle;

    /// <summary>
    /// 获得/设置 按钮颜色
    /// </summary>
    [Parameter]
    public virtual Color Color { get; set; } = Color.Primary;

    /// <summary>
    /// 获得/设置 按钮按钮形式枚举
    /// </summary>
    [Parameter]
    public ButtonVariant ButtonVariant { get; set; }

    /// <summary>
    /// 获得/设置 显示文字
    /// </summary>
    [Parameter]
    public string? Text { get; set; }

    /// <summary>
    /// 获得/设置 RenderFragment 实例
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// 获得/设置 是否为异步按钮，默认为 false 如果为 true 表示是异步按钮，点击按钮后禁用自身并且等待异步完成，过程中显示 loading 动画
    /// </summary>
    [Parameter]
    public bool IsAsync { get; set; }

    /// <summary>
    /// 获得/设置 OnClick 事件
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    protected virtual async Task HandlerClick()
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }

}